#!/bin/sh


# https://github.com/JopStro/bspswallow
# MIT License
# 
# Copyright (c) 2020 JopStro
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# Get class of a wid
get_class() {
	id=$1
  if [ -z "$id" ]; then
    echo ""
  else
    xprop -id "$id" | sed -n \
      -e '/WM_CLASS/s/\( "\)/\n/g; s/[^\n]*\n\([^"]*\)[^\n]*/\1\n/g' \
      -e '/WM_COMMAND/s/[^"]*/\n\n/1; s/\n"//1; s/\n\([^"]*\)".*/\n\1/; /\n/p' | sed '/^$/d' | head -n1
  fi
}

get_pid() {
	xprop _NET_WM_PID -id "$1" | awk '/[0-9]+/ {print $3}'
}

get_ppid() {
	ps -o ppid= -p $1
}


get_gppid_program() {
	cmd_string=$(ps -o cmd= -p $1)
	first_arg=$(echo $cmd_string | awk '{print $1}')

	if [ "$first_arg" = "/bin/sh" ]; then
		 echo $cmd_string | awk '{print $2}' | sed 's_^.*/__'
	else
		echo $first_arg | sed 's_^.*/__'
	fi
}

check_swallowing_process() {
	pid=$(get_pid $1)
	[ -z $pid ] && return 0

	gppid=$(get_ppid $(get_ppid $pid))
	[ $gppid -lt 1 ] && return 1

	grep -i "^$(get_gppid_program "$gppid")$" ~/.config/bspwm/swallower && return 0
	[ "$(get_ppid "$(get_ppid "$(get_pid "$1")")")" = "$(get_pid "$2")" ] && return 0 || return 1
}

swallow() {
	addedtodesktop=$2
	lasttermdesktop=$(bspc query -D -n last)

	swallowerid=$1
	swallowingid=$(bspc query -N -n last)

	if [ "$addedtodesktop" = "$lasttermdesktop" ] && check_swallowing_process "$swallowerid" "$swallowingid"; then
		grep -q "^$(get_class "$swallowerid")$" ~/.config/bspwm/{noswallow,swallower} && return
		grep -i "^$(get_class "$swallowingid")$" ~/.config/bspwm/swallower || return
		echo "$swallowerid $swallowingid" >> /tmp/swallowids
		bspc node "$swallowingid" --flag hidden=on
	fi
}

spit() {
	spitterid=$1
	spitterdesktop=$2
	grep "^$spitterid" /tmp/swallowids || return
	spittingid=$(grep "^$spitterid" /tmp/swallowids | head -n1 | awk '{print $2}')

	bspc node "$spittingid" --flag hidden=off

	termdesktop=$(bspc query -D -n "$spittingid")
	[ "$termdesktop" = "$spitterdesktop" ] || bspc node "$spittingid" -d "$spitterdesktop"

	bspc node "$spittingid" -f
	sed -i "/^$spitterid/d" /tmp/swallowids
}

bspc subscribe node_add node_remove | while read -r event
do
	case $(echo "$event" | awk '{ print $1 }') in
		node_add)
		echo "Swallow"
		echo $event
            		swallow $(echo "$event" | awk '{print $5 " " $3}')
			;;
		node_remove)
		echo "Spit"
			spit $(echo "$event" | awk '{print $4 " " $3}')
			;;
	esac
done
